#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;

use File::Basename qw(basename);
our $PROGNAME = basename($0);

use open IO => ':locale';
use Encode qw(decode);
use Encode::Locale;

@ARGV = map { decode('locale', $_, 1) } @ARGV;

use Getopt::Long;

use FindBin;
use lib "${FindBin::Bin}/../lib";

use Unicoder;

our $dry_run = 0;
our $verbose = 0;

sub usage { print <<END; }
usage:
    $PROGNAME [<option> ...] <command> [<arguments> ...]
commands:
    $PROGNAME list-blocks
    $PROGNAME list-scripts
    $PROGNAME block '<blockname>'    or char., codepoint, or char. name
    $PROGNAME table '<blockname>'    "
    $PROGNAME charinfo '<char>'      single char., codepoint, or char. name
    $PROGNAME charprops '<char>'
    $PROGNAME search <keyword> ...   can use -<keyword> or +<keyword>
    $PROGNAME help
options:
    --dumper
    --tsv, --tab-separated-values
    --csv, --comma-separated-values
    --text
    --dec, --decimal
    --oct, --octal
    --hex, --hexadecimal
END

our $format;
our $base;

my $p = Getopt::Long::Parser->new();
$p->configure('gnu_compat', 'bundling', 'no_ignore_case');
$p->getoptionsfromarray(
    \@ARGV,
    'h|help'                     => sub { usage; exit 0; },
    'tsv|tab-separated-values'   => sub { $format = 'tsv'; },
    'csv|comma-separated-values' => sub { $format = 'csv'; },
    'text'                       => sub { $format = 'text'; },
    'hex|hexadecimal'            => sub { $base = 16; },
    'oct|octal'                  => sub { $base = 8; },
    'dec|decimal'                => sub { $base = 10; },
    'dumper|data-dumper'         => sub { $format = 'dumper'; },
    'v|verbose+'                 => \$verbose,
    'n|dry-run'                  => \$dry_run,
) or die("Type '$PROGNAME --help' for help.\n");

my ($command, @arguments) = @ARGV;
if (!defined $command) {
    die("No command specified.\n");
}

my $unicoder = Unicoder->new();
$unicoder->format($format) if defined $format;
$unicoder->base($base)     if defined $base;

if ($command =~ m{^(list-?)?blocks$}i) {
    $unicoder->listBlocks();
} elsif ($command =~ m{^(list-?)?scripts$}i) {
    $unicoder->listScripts();
} elsif ($command =~ m{^char(acter)?(-?info)?$}i) {
    foreach my $argument (@arguments) {
        if ($argument eq '-') {
            local @ARGV = ('-');
            while (<>) {
                $_ = trim($_);
                $unicoder->charInfo($_);
            }
        } else {
            $unicoder->charInfo($argument);
        }
    }
} elsif ($command =~ m{^char(acter)?(-?prop(?:s|erties))?$}i) {
    foreach my $argument (@arguments) {
        if ($argument eq '-') {
            local @ARGV = ('-');
            while (<>) {
                $_ = trim($_);
                $unicoder->charProperties($_);
            }
        } else {
            $unicoder->charProperties($argument);
        }
    }
} elsif ($command =~ m{^search$}i) {
    $unicoder->search(@arguments);
} elsif ($command =~ m{^help$}i) {
    usage();
    exit(0);
} elsif ($command =~ m{^block$}i) {
    foreach my $argument (@arguments) {
        if ($argument eq '-') {
            local @ARGV = ('-');
            while (<>) {
                $_ = trim($_);
                $unicoder->listBlock($_);
            }
        } else {
            $unicoder->listBlock($argument);
        }
    }
} elsif ($command =~ m{^table$}i) {
    foreach my $argument (@arguments) {
        if ($argument eq '-') {
            local @ARGV = ('-');
            while (<>) {
                $_ = trim($_);
                $unicoder->listBlockTable($_);
            }
        } else {
            $unicoder->listBlockTable($argument);
        }
    }
} elsif ($command =~ m{^each-?char(acter)?$}i) {
    foreach my $argument (@arguments) {
        if ($argument eq '-') {
            local @ARGV = ('-');
            while (<>) {
                $_ = trim($_);
                $unicoder->eachCharacter($_);
            }
        } else {
            $unicoder->eachCharacter($argument);
        }
    }
} else {
    die("No such command: $command\n");
}

sub trim {
    if (wantarray) {
        my @result = @_;
        foreach my $string (@result) {
            $string =~ s{\A\s+}{}s;
            $string =~ s{\s+\z}{}s;
        }
        return @result;
    }
    if (defined wantarray) {
        my $string = shift;
        $string =~ s{\A\s+}{}s;
        $string =~ s{\s+\z}{}s;
        return $string;
    }
    foreach my $string (@_) {
        $string =~ s{\A\s+}{};
        $string =~ s{\s+\z}{};
    }
}
