#!/usr/bin/env perl
use warnings;
use strict;
use JSON;
use Unicode::UCD qw(charinfo charprops_all prop_aliases prop_value_aliases);
use JSON::XS;
use charnames qw();
use Getopt::Long;

our $verbose = 0;
our $props = 0;

Getopt::Long::Configure('gnu_getopt');
Getopt::Long::GetOptions(
    'v|verbose+' => \$verbose,
    'p|props' => \$props,
    'help|?' => sub { usage(); exit(0); },
) or die("Type 'charinfo --help' for help.\n");

sub usage { print(<<"EOF"); }
charinfo [-v|--verbose] [-p|--props] <codepoint>
                                     "<character>"
                                     <charname>
examples:
    charinfo U+0041                     # hexadecimal
    charinfo 0x0041                     # "
    charinfo 0101                       # octal (start with 0)
    charinfo 65                         # decimal
    charinfo A                          # single character
    charinfo "LATIN CAPITAL LETTER A"   # character name in quotes
    charinfo LATIN CAPITAL LETTER A     # or without them
EOF

die("not enough arguments\n") if !scalar @ARGV;
my $arg = join(" ", @ARGV);
my $char = find_charinfo($arg);
die("no such character: $arg\n") if !$char;

my $codepoint = hex($char->{code});
$char->{_codepoint_hex} = sprintf('U+%04X', $codepoint);
$char->{_codepoint_dec} = $codepoint;

if ($props || $verbose) {
    my $charprops = charprops_all(hex($char->{code}));
    if (defined $charprops) {
        $char->{props} = $charprops;
        if (($verbose && $props) || $verbose >= 2) {
            # include property name and value aliases
            foreach my $propname (keys %$charprops) {
                my $propvalue = $charprops->{$propname};
                my @prop_name_aliases  = grep { $_ ne $propname  } prop_aliases($propname);
                my @prop_value_aliases = grep { $_ ne $propvalue } prop_value_aliases($propname, $propvalue);
                $charprops->{$propname} =
                  [$propvalue, [@prop_name_aliases], [@prop_value_aliases]];
            }
        }
    }
}

print(JSON->new()->pretty(1)->canonical(1)->ascii(1)->encode($char));

sub find_charinfo {
    my ($query) = @_;
    my $result;
    if (defined ($result = parse_number($query))) {
        return charinfo($result);
    }
    if (defined ($result = charnames::vianame(uc($query)))) {
        return charinfo($result);
    }
    if (length($query) == 1) {
        return charinfo(ord($query));
    }
    return;
}

sub parse_number {
    my ($str) = @_;
    return hex($1) if $str =~ /^(?:u\+|0x)([[:xdigit:]]+)$/i;
    return oct($1) if $str =~ /^0(\d+)$/;
    return 0 + $1  if $str =~ /^\d+$/;
    return;
}
