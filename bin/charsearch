#!/usr/bin/env perl
use warnings;
use strict;
use Unicode::UCD qw(charblocks charinfo);
use Data::Dumper qw(Dumper);
use List::Util qw(max sum min);
use File::Path qw(make_path);
use File::Basename qw(dirname);
use POSIX qw(round);
use IO::File;
use Getopt::Long;
use JSON::XS qw(encode_json decode_json);
use feature qw(state);
use open IO => ':locale';
STDERR->autoflush(1) if -t 2;

use lib dirname(__FILE__) . "/../lib";
use Unicoder::AdobeGlyphNames qw(get_glyph_name);

use constant IDX_CODEPOINT => 0;
use constant IDX_WORD_INDEX => 1;
use constant IDX_SCORE => 2;
use constant IDX_CHARNAME_INDEX => 3;
# use constant IDX_QUERY_WORD => 4;
use constant IDX_CHARNAME_COUNT_OF_WORD => 5;

sub weight_first_word_index {
    # higher score if you start with the first word
    my ($x, $charname_count) = @_;
    my $score = 0.9 ** $x;
    if ($charname_count) {
        $score *= 2 ** (1 / $charname_count);
    }
    return $score;
}
sub weight_word_index_delta {
    # higher scores if your query words are in the same order as the
    # words in the character name
    my ($x, $charname_count) = @_;
    my $score = 0.9 ** abs($x);
    if ($charname_count) {
        $score *= 2 ** (1 / $charname_count);
    }
    return $score;
}
sub weight_word_substring_length_score {
    # entire words get higher scores than substrings
    my $score = shift();
    return sqrt(sqrt($score));
}
sub weight_word_count_score {
    # match more words in the character name and get higher score
    my ($word_count, $total_word_count) = @_;
    return sqrt(sqrt($word_count / $total_word_count));
}

our %SKIP = (
    "CJK Unified Ideographs Extension A" => 1, # U+3400   naming scheme not useful for keyword searches
    "CJK Unified Ideographs"             => 1, # U+4E00   naming scheme not useful for keyword searches
    "High Surrogates"                    => 1, # U+D800   no useful search results
    "High Private Use Surrogates"        => 1, # U+DB80   no useful search results
    "Low Surrogates"                     => 1, # U+DC00   no useful search results
    "Private Use Area"                   => 1, # U+E000   no useful search results
    "Tangut"                             => 1, # U+17000  naming scheme not useful for keyword searches
    "Tangut Components"                  => 1, # U+18800  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension B" => 1, # U+20000  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension C" => 1, # U+2A700  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension D" => 1, # U+2B740  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension E" => 1, # U+2B820  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension F" => 1, # U+2CEB0  naming scheme not useful for keyword searches
    "CJK Unified Ideographs Extension G" => 1, # U+30000  naming scheme not useful for keyword searches
    "Supplementary Private Use Area-A"   => 1, # U+F0000  no useful search results
    "Supplementary Private Use Area-B"   => 1, # U+100000 no useful search results
);

our $print_char = 0;
our $create_db = 0;
our $decimal;
our $hexadecimal;
our $adobe;

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
    "create-db" => \$create_db,
    'c|char|print-char' => \$print_char,
    'd|decimal' => \$decimal,
    'x|hexadecimal' => \$hexadecimal,
    'a|adobe|adobe-glyph-names' => \$adobe,
    'help|?' => sub { usage(); exit(0); },
) or die(":-(\n");

sub usage { print(<<"EOF"); }
charsearch --create-db
charsearch [<option> ...] <keyword> ...
  -c, --char
  -d, --decimal
  -x, --hexadecimal
  -a, --adobe-glyph-names
EOF

our $charblocks = charblocks();
our @charblocks = sort { $a->[0][0] <=> $b->[0][0] } values %$charblocks;
my $total_count = sum map { $_->[1] - $_->[0] + 1 } grep { !$SKIP{$_->[2]} } map { @$_ } @charblocks;

if ($create_db) {
    create_db();
    exit();
}

die("not enough arguments\n") if !scalar @ARGV;
search_db(@ARGV);

# Prints a string like U+0040 or U+1F4A9.
sub u {
    return sprintf("U+%04X", shift);
}

# Don't print certain characters.
sub displayed_char {
    my ($codepoint) = @_;
    return '' if $codepoint >= 0 && $codepoint <= 31;
    return '' if $codepoint >= 127 && $codepoint <= 159;
    return '' if $codepoint >= 0x2060 && $codepoint <= 0x206f;
    return '' if $codepoint >= 0x2027 && $codepoint <= 0x202e;
    return chr($codepoint);
}

sub create_db {
    my $db = {};
    my $codepoint_count = 0;
    my $add_word = sub {
        my %args = @_;
        my $word = $args{word};
        push(@{$db->{$word}}, new_result(
            codepoint      => $args{codepoint},
            word_index     => $args{word_index},
            score          => 100,
            charname_index => $args{charname_index},
        ));
        for (my $l = length($word) - 1; $l >= 3; $l -= 1) {
            my $substr = substr($word, 0, $l);
            my $score = $l / length($word);
            $score = 0 + round($score * 100); # in [0, 100]
            push(@{$db->{$substr}}, new_result(
                codepoint      => $args{codepoint},
                word_index     => $args{word_index},
                score          => $score,
                charname_index => $args{charname_index},
            ));
            # notes: Data::Dumper will output fractional numbers as
            # strings, e.g., "'0.83'".  Even after round($_ * 100)
            # they're still quoted.  Forcibly casting them as numbers
            # (0 + $_) removes the quotes though round($_ * 100) is
            # still necessary.  So all the scores are now in [0, 100]
            # instead of [0, 1].
        }
    };
    foreach my $charblock (@charblocks) {
        foreach my $subblock (@$charblock) {
            my ($start, $end, $blockname) = @$subblock;
            next if $SKIP{$blockname};
            if (-t 2) {
                printf STDERR ("\r\e[K  %7.2f%% Searching %s (%s to %s) ...\e[K", $codepoint_count / $total_count * 100, $blockname, u($start), u($end));
            }
            $codepoint_count += $end - $start + 1;
            for (my $codepoint = $start; $codepoint <= $end; $codepoint += 1) {
                my $charinfo = charinfo($codepoint);
                next if !defined $charinfo;
                my $charname   = $charinfo->{name};
                my $charname10 = $charinfo->{unicode10};
                my @charwords   = word_split($charname);
                my @charwords10 = word_split($charname10);
                for (my $i = 0; $i < scalar @charwords; $i += 1) {
                    my $word = $charwords[$i];
                    &$add_word(charname_index => 0,
                               codepoint      => $codepoint,
                               word           => $word,
                               word_index     => $i);
                }
                for (my $i = 0; $i < scalar @charwords10; $i += 1) {
                    my $word = $charwords10[$i];
                    &$add_word(charname_index => 1,
                               codepoint      => $codepoint,
                               word           => $word,
                               word_index     => $i);
                }
            }
        }
    }
    if (-t 2) {
        printf STDERR ("\r\e[K");
    }
    my $json_filename = "$ENV{HOME}/.local/share/unicoder/charsearchdb.json";
    make_path(dirname($json_filename));
    my $fh = IO::File->new($json_filename, "w");
    die("$json_filename: $!\n") if !$fh;
    $fh->print(encode_json($db));
}

sub search_db {
    my @query = @_;
    state $db;
    if (!$db) {
        my $filename = "$ENV{HOME}/.local/share/unicoder/charsearchdb.json";
        $db = decode_json(join("", IO::File->new($filename, "r")->getlines()));
    }
    @query = map { word_split($_) } @query;
    if (!scalar @query) {
        warn("no query provided\n");
        return;
    }
    my @results;
    foreach my $query_word (@query) {
        my $sub_results = $db->{$query_word};
        if (!$sub_results) {
            next;
        }
        push(@results, map { [@$_] } @$sub_results); # shallow copy of each array
        foreach my $result (@$sub_results) {
            # $result->[IDX_QUERY_WORD] = $query_word;
            $result->[IDX_CHARNAME_COUNT_OF_WORD] = scalar @$sub_results;
        }
        # words like LATIN CAPITAL LETTER affect scores less than
        # words like MULTIPLICATION or SECTION
    }
    if (!scalar @results) {
        warn("no results\n");
        return;
    }

    my %by_codepoint;
    foreach my $result (@results) {
        my $codepoint = $result->[IDX_CODEPOINT];
        push(@{$by_codepoint{$codepoint}}, $result);
    }

    my %scores_by_codepoint;
    foreach my $codepoint (keys %by_codepoint) {
        my $charinfo = charinfo($codepoint);
        my @scores;
        my %scores_by_charname;
        my $charname = $charinfo->{name};
        my $charname10 = $charinfo->{unicode10};
        foreach my $charname_data (grep { defined $_->[0] && $_->[0] ne '' && $_ ne '<control>' } ([$charname, 0], [$charname10, 1])) {
            my ($charname, $charname_index) = @$charname_data;
            my @results = grep { $_->[IDX_CHARNAME_INDEX] == $charname_index } @{$by_codepoint{$codepoint}};
            next if !scalar @results;
            my $score = weight_first_word_index($results[0][IDX_WORD_INDEX],
                                                $results[0][IDX_CHARNAME_COUNT_OF_WORD]);
            foreach my $i (1 .. $#results) {
                my $word_index_delta = $results[$i][IDX_WORD_INDEX] - $results[$i - 1][IDX_WORD_INDEX];
                $score *= weight_word_index_delta($word_index_delta,
                                                  $results[$i][IDX_CHARNAME_COUNT_OF_WORD]);
            }
            foreach my $i (0 .. $#results) {
                $score *= weight_word_substring_length_score($results[$i][IDX_SCORE]);
            }
            my @charname = word_split($charname);
            $score *= weight_word_count_score(scalar(@results), scalar(@charname));
            $scores_by_charname{$charname} = $score;
            push(@scores, { charname => $charname, charname_index => $charname_index, score => $score });
        }

        my @charnames = sort { $scores_by_charname{$b} <=> $scores_by_charname{$a} } keys %scores_by_charname;
        @scores = sort { $b->{score} <=> $a->{score} } @scores;
        $scores_by_codepoint{$codepoint} = {
            score => $scores[0]->{score},
            scores_list => [@scores],
            scores_by_charname => {%scores_by_charname},
            charnames => [@charnames],
        };
    }

    my @codepoints = sort { ($scores_by_codepoint{$b}{score} <=> $scores_by_codepoint{$a}{score}) || ($a <=> $b) } keys %scores_by_codepoint;
    splice(@codepoints, 20);
    foreach my $codepoint (@codepoints) {
        my $which_charname = $scores_by_codepoint{$codepoint}->{charnames}->[0];
        my $charinfo = charinfo($codepoint);
        # my $charname = $charinfo->{name};
        # my $charname10 = $charinfo->{unicode10};
        # printf("%5.2f  ", $scores_by_codepoint{$codepoint}->{score});
        if ($hexadecimal || (!$decimal && !$hexadecimal)) {
            printf("%-8s  ", u($codepoint));
        }
        if ($decimal) {
            printf("%8d  ", $codepoint);
        }
        if ($print_char) {
            printf("%1s  ", displayed_char($codepoint));
        }
        if ($adobe) {
            printf("%-20s  ", get_glyph_name($codepoint, 1) // "");
        }
        print("$which_charname\n");
    }
}

sub word_split {
    my ($str) = @_;
    return if !defined $str;
    return grep { $_ ne '' && $_ ne '<control>' } map { lc $_ } split(qr/[^[:alnum:]]+/, $str);
}

sub new_result {
    my %args = @_;
    my $result = [];
    $result->[IDX_CODEPOINT]      = $args{codepoint};
    $result->[IDX_WORD_INDEX]     = $args{word_index};
    $result->[IDX_SCORE]          = $args{score};
    $result->[IDX_CHARNAME_INDEX] = $args{charname_index};
    return $result;
}
