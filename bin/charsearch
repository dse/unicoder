#!/usr/bin/env perl
use warnings;
use strict;
use Unicode::UCD qw(charblocks charinfo);
use Data::Dumper qw(Dumper);
use List::Util qw(max sum);
use Getopt::Long;
use open IO => ':locale';
STDERR->autoflush(1) if -t 2;

# PROTOTYPES
sub index_of_where (&@);

# These blocks can be skipped for searching.  Usually because each
# character within that block has the same name (modulo a number),
# or they have no useful characters
our %SKIP = (
    "CJK Unified Ideographs Extension A" => 1, # U+3400   naming scheme
    "CJK Unified Ideographs"             => 1, # U+4E00   naming scheme
    "High Surrogates"                    => 1, # U+D800   no useful search results
    "High Private Use Surrogates"        => 1, # U+DB80   no useful search results
    "Low Surrogates"                     => 1, # U+DC00   no useful search results
    "Private Use Area"                   => 1, # U+E000   no useful search results
    "Tangut"                             => 1, # U+17000  naming scheme
    "Tangut Components"                  => 1, # U+18800  naming scheme
    "CJK Unified Ideographs Extension B" => 1, # U+20000  naming scheme
    "CJK Unified Ideographs Extension C" => 1, # U+2A700  naming scheme
    "CJK Unified Ideographs Extension D" => 1, # U+2B740  naming scheme
    "CJK Unified Ideographs Extension E" => 1, # U+2B820  naming scheme
    "CJK Unified Ideographs Extension F" => 1, # U+2CEB0  naming scheme
    "CJK Unified Ideographs Extension G" => 1, # U+30000  naming scheme
    "Supplementary Private Use Area-A"   => 1, # U+F0000  no useful search results
    "Supplementary Private Use Area-B"   => 1, # U+100000 no useful search results
);

our $print_char = 0;
our $print_score = 0;

Getopt::Long::Configure(qw(gnu_getopt));
Getopt::Long::GetOptions(
    'c|char|print-char' => \$print_char,
    's|score|print-score' => \$print_score,
    'help|?' => sub { usage(); exit(0); },
) or die(":-(\n");

sub usage { print(<<"EOF"); }
charblock [<option> ...] <block-name|codepoint>
    --char, --print-char    display the character
    --score, --print-score
EOF

die("not enough arguments\n") if !scalar @ARGV;

my @keywords = @ARGV;

our $charblocks = charblocks();
our @charblocks = sort { $a->[0][0] <=> $b->[0][0] } values %$charblocks;

my $total_count = sum map { $_->[1] - $_->[0] + 1 } grep { !$SKIP{$_->[2]} } map { @$_ } @charblocks;

my @scores;
my %scores;
my $codepoint_count = 0;
foreach my $charblock (@charblocks) {
    foreach my $subblock (@$charblock) {
        my $start = $subblock->[0];
        my $end   = $subblock->[1];
        my $blockname = $subblock->[2];
        next if $SKIP{$blockname};
        if (-t 2) {
            printf STDERR ("\e[K\r  %7.2f%% Searching %s (%s to %s) ...", $codepoint_count / $total_count * 100, $blockname, u($start), u($end));
        }
        $codepoint_count += $end - $start + 1;
        for (my $codepoint = $start; $codepoint <= $end; $codepoint += 1) {
            my $charinfo   = charinfo($codepoint);
            next if !defined $charinfo;
            my $charname   = $charinfo->{name};
            my $charname10 = $charinfo->{unicode10};
            undef $charname10 if $charname10 eq '';

            # Search results are based on a simple keyword search.
            # Scores are based on the number of specified keywords
            # appearing in each result.
            my $score_1 = query_score_by_charname($charname, $codepoint);
            my $score_2 = defined $charname10 ? query_score_by_charname($charname10, $codepoint) : 0;
            next if !$score_1 && !$score_2;
            my $score = max($score_1, $score_2);
            push(@scores, [$score, $codepoint, $charname, $charname10]);
            $scores{$score} = 1;
        }
    }
}
if (-t 2) {
    printf STDERR ("\r\e[K");
}

# After collecting all the scores, we take the top two distinct scores
# and display any results with those scores.
my @distinct_scores = sort { $b <=> $a } keys %scores;
my @results;
if (scalar @keywords == 1) {
    @results = sort { $b->[0] <=> $a->[0] || $a->[1] <=> $b->[1] } @scores;
} else {
    my $max_score = $distinct_scores[0];
    my $min_score = $distinct_scores[1] // $distinct_scores[0];
    @results = sort { $b->[0] <=> $a->[0] || $a->[1] <=> $b->[1] } grep { $_->[0] == $max_score || $_->[0] == $min_score } @scores;
}
foreach my $result (@results) {
    my $score = $result->[0];
    my $codepoint = $result->[1];
    my $charinfo = charinfo($codepoint);
    my $name = join(' -- ', grep { defined $_ } @{$result}[2..3]);

    printf("%-8s", u($codepoint));
    printf("  %.3f", $score) if $print_score;
    printf("  %-1.1s", displayed_char($codepoint)) if $print_char;
    printf("  %s\n", $name);

    # printf("%-8s  %s\n", u($codepoint), $name);
}

# This subroutine is responsible for determining matches and computing
# scores.
sub query_score_by_charname {
    my ($name, $codepoint) = @_;
    return 0 if $name eq '<control>';
    my @words = map { lc $_ } grep { /\S/ } split(/[^[:alnum:]]+/, $name);
    return 0 if scalar @words == 0;
    my $count = 0;
    foreach my $keyword (@keywords) {
        if (index_of($keyword, @words) != -1) {
            $count += 1;
        }
    }
    return $count / scalar @words;
}

# Return the index of the first item in @items equal to the specified
# $item, using the eq operator.
sub index_of {
    my ($item, @items) = @_;
    for (my $i = 0; $i <= $#items; $i += 1) {
        return $i if $item eq $items[$i];
    }
    return -1;
}

# Return the index of the first item in @items for which the specified
# $sub(routine) returns true if $_ is a match.
sub index_of_where (&@) {
    my ($sub, @items) = @_;
    foreach my $i (0 .. $#items) {
        local $_ = $items[$i];
        return $i if &$sub();
    }
    return -1;
}

# Prints a string like U+0040 or U+1F4A9.
sub u {
    return sprintf("U+%04X", shift);
}

# Don't print certain characters.
sub displayed_char {
    my ($codepoint) = @_;
    return '' if $codepoint >= 0 && $codepoint <= 31;
    return '' if $codepoint >= 127 && $codepoint <= 159;
    return '' if $codepoint >= 0x2060 && $codepoint <= 0x206f;
    return '' if $codepoint >= 0x2027 && $codepoint <= 0x202e;
    return chr($codepoint);
}

# For troubleshooting and debugging.
sub dumper {
    local $Data::Dumper::Indent   = 1;
    local $Data::Dumper::Useqq    = 1;
    local $Data::Dumper::Terse    = 1;
    local $Data::Dumper::Sortkeys = 1;
    goto &Data::Dumper::Dumper;
}

sub index_all {
    foreach my $charblock (@charblocks) {
        foreach my $subblock (@$charblock) {
            my ($start, $end, $blockname) = @$subblock;
            next if $SKIP{$blockname};
            for (my $codepoint = $start; $codepoint <= $end; $codepoint += 1) {
                my $charinfo = charinfo($codepoint);
                next if !$charinfo;
                my $name = $charinfo->{name};
                my $name10 = $charinfo->{unicode10};
                if (defined $name10 && normalize_name($name) eq normalize_name($name10)) {
                    $name10 = undef;
                }
                if (defined $name) {
                    index_char_name($codepoint, $name);
                }
                if (defined $name10) {
                    index_char_name($codepoint, $name10);
                }
            }
        }
    }
}

our %index;

sub index_char_name {
    my ($codepoint, $name) = @_;
    my @name = split_name($name);
    for (my $idx = 0; $idx < scalar @name; $idx += 1) {
        my $word = $name[$idx];
        push(@{$index{$word}}, [$codepoint, $idx, 1]);
        my $len = length $word;
        for (my $substr_len = 3; $substr_len < $len; $substr_len += 1) {
            my $substr = substr($word, 0, $substr_len);
            push(@{$index{$substr}}, [$codepoint, $idx, $substr_len / $len]);
        }
    }
}

sub normalize_name {
    my ($name) = @_;
    $name = ~ s{^A-Za-z0-9]+}{ }g;
    $name =~ s{\A\s+}{};
    $name =~ s{\s+\z}{};
    $name = lc $name;
    return $name;
}

sub split_name {
    my ($name) = @_;
    return split(/\s+/, normalize_name($name));
}
