#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use feature qw(state);

use Unicode::UCD qw(charblocks charinfo);
use Data::Dumper qw(Dumper);
use HTML::Entities qw(encode_entities);

main(@ARGV);

sub main {
    my ($cmd, @args) = @_;
    if (!defined $cmd) {
        die("command not specified\n");
    }

    my $cmdTyped = $cmd;
    $cmd =~ s{-[a-z]}{uc(substr($&, 1))}ge;
    if ($cmd eq 'blocks' || $cmd eq 'listBlocks' || $cmd eq 'listAllBlocks') {
        init();
        listBlocks();
    } elsif ($cmd eq 'listMostBlocks') {
        init();
        listMostBlocks();
    } elsif ($cmd eq 'listAlmostAllBlocks') {
        init();
        listAlmostAllBlocks();
    } elsif ($cmd eq 'block') {
        if (!scalar @args) {
            die("not enough arguments\n");
        }
        init();
        foreach my $block (@args) {
            printCharactersInBlock($block);
        }
    } elsif ($cmd eq 'bmp') {
        init();
        printCharactersInRange(0, 65535);
    } elsif ($cmd eq 'range') {
        if (scalar @args < 2) {
            die("not enough arguments\n");
        }
        init();
        my ($from, $to) = @args;
        printCharactersInRange($from, $to);
    } elsif ($cmd eq 'mostBlocks') {
        init();
        printCharactersInMostBlocks();
    } elsif ($cmd eq 'almostAllBlocks') {
        init();
        printCharactersInAlmostAllBlocks();
    } elsif ($cmd eq 'entities') {
        printCharactersInRange(0, 0x2fff, entitiesOnly => 1);
    } else {
        die("command not found: $cmdTyped\n");
    }
}

our $excludeBlocksA;
our $excludeBlocksB;

BEGIN {
    $excludeBlocksA = {
        'High Surrogates'                         => 1, #   896 codepoints starting at U+D800
        'High Private Use Surrogates'             => 1, #   128 codepoints starting at U+DB80
        'Low Surrogates'                          => 1, #  1024 codepoints starting at U+DC00
        'Private Use Area'                        => 1, #  6400 codepoints starting at U+E000
        'Supplementary Private Use Area-A'        => 1, # 65536 codepoints starting at U+F0000
        'Supplementary Private Use Area-B'        => 1, # 65536 codepoints starting at U+100000
    };
    $excludeBlocksB = {
        'CJK Unified Ideographs Extension A'      => 1, #  6592 codepoints starting at U+3400
        'CJK Unified Ideographs'                  => 1, # 20992 codepoints starting at U+4E00
        'Hangul Syllables'                        => 1, # 11184 codepoints starting at U+AC00
        'CJK Compatibility Ideographs'            => 1, #   512 codepoints starting at U+F900
        'Tangut'                                  => 1, #  6144 codepoints starting at U+17000
        'CJK Unified Ideographs Extension B'      => 1, # 42720 codepoints starting at U+20000
        'CJK Unified Ideographs Extension C'      => 1, #  4160 codepoints starting at U+2A700
        'CJK Unified Ideographs Extension D'      => 1, #   224 codepoints starting at U+2B740
        'CJK Unified Ideographs Extension E'      => 1, #  5776 codepoints starting at U+2B820
        'CJK Unified Ideographs Extension F'      => 1, #  7488 codepoints starting at U+2CEB0
        'CJK Compatibility Ideographs Supplement' => 1, #   544 codepoints starting at U+2F800
        'CJK Unified Ideographs Extension G'      => 1, #  4944 codepoints starting at U+30000
    };
}

our $charblocks;

sub init {
    $charblocks = charblocks();
}

sub listMostBlocks {
    listBlocks(exclusionLevel => 2);
}

sub listAlmostAllBlocks {
    listBlocks(exclusionLevel => 1);
}

sub listBlocks {
    my (%options) = @_;
    my $exclusionLevel = $options{exclusionLevel} // 0;

    my @blockNames = keys %$charblocks;
    @blockNames = sort { $charblocks->{$a}->[0]->[0] <=> $charblocks->{$b}->[0]->[0] } @blockNames;
    printBlockHeading();
    my $count = 0;
    foreach my $blockName (@blockNames) {
        next if $exclusionLevel >= 1 && $excludeBlocksA->{$blockName};
        next if $exclusionLevel >= 2 && $excludeBlocksB->{$blockName};
        $count += printBlockRow($blockName);
    }
    printBlockFooter($count);
}

sub printCharactersInAllBlocks {
    my (%options) = @_;
    my $exclusionLevel = $options{exclusionLevel} // 0;

    my @blockNames = keys %$charblocks;
    @blockNames = sort { $charblocks->{$a}->[0]->[0] <=> $charblocks->{$b}->[0]->[0] } @blockNames;
    my $totalCount = 0;
    foreach my $blockName (@blockNames) {
        next if $exclusionLevel >= 1 && $excludeBlocksA->{$blockName};
        next if $exclusionLevel >= 2 && $excludeBlocksB->{$blockName};
        $totalCount += printCharactersInBlock($blockName);
    }
}

sub printCharactersInAlmostAllBlocks {
    printCharactersInAllBlocks(exclusionLevel => 1);
}

sub printCharactersInMostBlocks {
    printCharactersInAllBlocks(exclusionLevel => 2);
}

sub printCharactersInBlock {
    my ($spec) = @_;
    my $blockName = toBlockName($spec);
    if (!defined $blockName) {
        die(sprintf("%s: no such block\n", $spec));
    }
    my $block = $charblocks->{$blockName};
    if (!defined $block) {
        die(sprintf("%s: no such block\n", $spec));
    }
    print("# $blockName\n");
    printCharacterHeading();
    my $count = 0;
    foreach my $range (@$block) {
        my $low = $range->[0];
        my $high = $range->[1];
        foreach my $codepoint ($low .. $high) {
            $count += printCharacterRow($codepoint);
        }
    }
    return $count;
}

sub printCharactersInRange {
    my ($from, $to, %options) = @_;
    my $codepointFrom = parseCodepoint($from);
    if (!defined $codepointFrom) {
        die("not a codepoint: $from\n");
    }
    my $codepointTo = parseCodepoint($to);
    if (!defined $codepointTo) {
        die("not a codepoint: $to\n");
    }
    printCharacterHeading();
    foreach my $codepoint ($codepointFrom .. $codepointTo) {
        printCharacterRow($codepoint, %options);
    }
}

sub toCodepoint {
    my ($spec) = @_;
    my $codepoint = parseCodepoint($spec);
    if (defined $codepoint) {
        return $codepoint;
    }
    return;
}

sub toBlockName {
    my ($spec) = @_;
    my $blockName = parseBlockName($spec);
    if (defined $blockName) {
        return $blockName;
    }
    my $codepoint = toCodepoint($spec);
    if (defined $codepoint) {
        my $charinfo = charinfo($codepoint);
        if (!defined $charinfo) {
            return;
        }
        return $charinfo->{block};
    }
    return;
}

sub parseCodepoint {
    my ($codepoint) = @_;
    if ($codepoint =~ m{^(?:u\+?|\+|0?x)(?<hex>[[:xdigit:]]+)$}i) {
        return hex($+{hex});
    }
    if ($codepoint =~ m{^\d+$}) {
        return 0 + $codepoint;
    }
    return;
}

sub parseBlockName {
    my ($blockName) = @_;
    $blockName = normalizeBlockName($blockName);
    if (defined $blockName) {
        return $blockName;
    }
    return;
}

sub printBlockHeading {
    print("#Low      High      Count   Hex Low   Hex High  Name\n");
    print("#-------  --------  ------  --------  --------  ----------------------------------------\n");
}

sub printBlockFooter {
    my ($count) = @_;
    print("#-------  --------  ------  --------  --------  ----------------------------------------\n");
    printf("%-18s  %6d\n", '#', $count);
}

sub printBlockRow {
    my ($blockName) = @_;
    my $block = $charblocks->{$blockName};
    my $count = 0;
    foreach my $range (@$block) {
        my $first = $range == $block->[0];
        my $low = $range->[0];
        my $high = $range->[1];
        my $lowHex = uPlus($low);
        my $highHex = uPlus($high);
        $count += $high - $low + 1;
        printf("%8d  %8d  %6d  %-8s  %-8s  %s\n", $low, $high, $high - $low + 1, $lowHex, $highHex, $first ? $blockName : '"');
    }
    return $count;
}

sub printCharacterHeading {
    print("#Decimal  Hex       Entity      Char    Name\n");
    print("#-------  --------  ----------  ------  ----------------------------------------\n");
}

sub printCharacterRow {
    my ($codepoint, %options) = @_;

    # skip surrogates entirely
    if ($codepoint >= 0xd800 && $codepoint <= 0xdfff) {
        return 0;
    }

    my $charinfo = charinfo($codepoint);
    my $charname = eval { $charinfo->{name}; };
    my $entity = encode_entities(chr($codepoint));

    if ($options{entitiesOnly}) {
        if (!defined $charinfo) {
            # normally we display only the codepoint
            return 0;
        }
        if (!defined $charname) {
            # normally we display <no name>
            return 0;
        }
        if (!defined $entity) {
            return 0;
        }
        if ($codepoint != 39) { # we need to include &#39; when displaying entities only
            if ($entity eq '') {
                return 0;
            }
            if ($entity =~ m{^&#}) {
                return 0;
            }
            if ($entity eq chr($codepoint)) {
                return 0;
            }
        }
    }

    # display blank if no entity
    if (defined $entity && $entity eq chr($codepoint)) {
        $entity = '';
    }

    # codepoint but no character
    if (!defined $charinfo) {
        printf("%8d  %-8s\n", $codepoint, uPlus($codepoint));
        return 1;
    }

    my $displayChar = chr($codepoint);

    # control characters
    if ((defined $charname && $charname eq '<control>') ||
        $codepoint >= 0 && $codepoint <= 31 ||
        $codepoint >= 127 && $codepoint <= 159) {
        $displayChar = undef;
    }

    # other specific characters
    if ($codepoint == 0x202a || $codepoint == 0x202b ||
        $codepoint == 0x202d || $codepoint == 0x202e ||
        $codepoint == 0x2065 || $codepoint == 0x2066 ||
        $codepoint == 0x2067 ||
        $codepoint == 0x2069 ||
        $codepoint == 0x2029 ||
        $codepoint == 0x202C) {
        $displayChar = undef;
    }

    printf("%8d  %-8s  %-10s  %-6s  %s\n",
           $codepoint,
           uPlus($codepoint),
           $entity // '<n/a>',
           $displayChar // '<n/a>',
           $charinfo->{name} // '<no name>');
    return 1;
}

sub uPlus {
    my ($codepoint) = @_;
    return sprintf('U+%04X', $codepoint);
}

sub normalizeBlockName {
    my ($spec) = @_;
    if (exists $charblocks->{$spec}) {
        return $spec;
    }
    $spec = blockNameForCmp($spec);
    foreach my $blockName (keys %$charblocks) {
        my $k = blockNameForCmp($blockName);
        if ($spec eq $k) {
            return $blockName;
        }
    }
    return;
}

sub blockNameForCmp {
    my ($spec) = @_;
    $spec = lc($spec);
    $spec =~ s{[^A-Za-z0-9]}{}g;
    return $spec;
}
